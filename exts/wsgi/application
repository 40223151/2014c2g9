#@+leo-ver=5-thin
#@+node:course-mde-tw.20140417093332.2216: * @file application
#@@language python
#@@tabwidth -4

#@+<<declarations>>
#@+node:course-mde-tw.20140417093332.2217: ** <<declarations>>
#@@language python

########################### 1. 導入所需模組
import cherrypy
import os
import math

########################### 2. 設定近端與遠端目錄
# 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# 設定在雲端與近端的資料儲存目錄
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 表示程式在雲端執行
    download_root_dir = os.environ['OPENSHIFT_DATA_DIR']
    data_dir = os.environ['OPENSHIFT_DATA_DIR']
else:
    # 表示程式在近端執行
    download_root_dir = _curdir + "/local_data/"
    data_dir = _curdir + "/local_data/"
#@-<<declarations>>
#@+others
#@+node:course-mde-tw.20140417093332.2218: ** class C2Project
########################### 3. 建立主物件
class C2Project(object):
    _cp_config = {
    # if there is no utf-8 encoding, no Chinese input available
    'tools.encode.encoding': 'utf-8',
    'tools.sessions.on' : True,
    'tools.sessions.storage_type' : 'file',
    'tools.sessions.locking' : 'explicit',
    'tools.sessions.storage_path' : data_dir+'/tmp',
    # session timeout is 60 minutes
    'tools.sessions.timeout' : 60
    }
    
    #@+others
    #@+node:2014pythonE.20140418074836.2204: *3* __init__
    def __init__(self):
        # hope to create downloads and images directories　
        if not os.path.isdir(download_root_dir+"downloads"):
            try:
                os.makedirs(download_root_dir+"downloads")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"images"):
            try:
                os.makedirs(download_root_dir+"images")
            except:
                print("mkdir error")
        if not os.path.isdir(download_root_dir+"tmp"):
            try:
                os.makedirs(download_root_dir+"tmp")
            except:
                print("mkdir error")
        if not os.path.isdir(data_dir+"data"):
            try:
                os.makedirs(data_dir+"data")
            except:
                print("mkdir error")
    #@+node:course-mde-tw.20140417093332.2219: *3* fileuploadform
    @cherrypy.expose
    def fileuploadform(self):
        return '''<h1>file upload</h1>
    <script src="/static/jquery.js" type="text/javascript"></script>
    <script src="/static/axuploader.js" type="text/javascript"></script>
    <script>
    $(document).ready(function(){
    $('.prova').axuploader({url:'/fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','txt'],
    finish:function(x,files)
        {
            alert('All files have been uploaded: '+files);
        },
    enable:true,
    remotePath:function(){
        return 'downloads/';
    }
    });
    });
    </script>
    <div class="prova"></div>
    <input type="button" onclick="$('.prova').axuploader('disable')" value="asd" />
    <input type="button" onclick="$('.prova').axuploader('enable')" value="ok" />
    </section></body></html>
    '''
    #@+node:course-mde-tw.20140417093332.2220: *3* brythonuploadform
    @cherrypy.expose
    def brythonuploadform(self):
        return '''<h1>file upload</h1>
    <script type="text/javascript" src="/static/Brython2.0.0-20140209-164925/brython.js"></script>
    <script type="text/javascript" >
    function getradio(tagname){
    var radios = document.getElementsByName(tagname);
    for (var i = 0, length = radios.length; i < length; i++) {
        if (radios[i].checked) {
            // do whatever you want with the checked radio
            return radios[i].value;
            // only one radio can be logically checked, don't check the rest
            break;
          }
       }
    }

    function run_js(){
        var cons = document.getElementById("console")
        var jscode = cons.value
        var t0 = (new Date()).getTime()
        eval(jscode)
        var t1 = (new Date()).getTime()
        console.log("Javascript code run in "+(t1-t0)+" ms")
    }
    </script>
    <script type="text/python3" src="/static/editor.py"></script>

    <script type="text/python3">
    from browser import doc

    overwrite = 0
    # add delete_program 1/7, seven steps to complete the ajax task, the last step is to add delete_program function on server
    # delete1 and delete2 parameters are also added into save_program function.
    delete1 = 0
    delete2 = 0

    def set_debug(ev):
        if ev.target.checked:
            __BRYTHON__.debug = 1
        else:
            __BRYTHON__.debug = 0
            
    def set_overwrite(ev):
        global overwrite
        if ev.target.checked:
            overwrite = 1
        else:
            overwrite = 0

    # add delete_program 2/7, client side add set_delete1 and set_delete2 functions.
    def set_delete1(ev):
        global delete1
        if ev.target.checked:
            delete1 = 1
        else:
            delete1 = 0

    def set_delete2(ev):
        global delete2
        if ev.target.checked:
            delete2 = 1
        else:
            delete2 = 0

    #### ajax process
    from browser import ajax,doc

    def on_complete(req):
        print(req.readyState)
        print('status',req.status)
        if req.status==200 or req.status==0:
            # show request text on id=result division
            doc["result"].html = req.text
        else:
            doc["result"].html = "error "+req.text

    def err_msg():
        doc["result"].html = "server didn't reply after %s seconds" %timeout

    timeout = 4

    def go(url):
        req = ajax.ajax()
        req.bind('complete', on_complete)
        req.set_timeout(timeout, err_msg)
        req.open('GET', url, True)
        req.send()

    def post(url):
        req = ajax.ajax()
        req.bind('complete', on_complete)
        req.set_timeout(timeout, err_msg)
        req.open('POST', url, True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        # doc["filename"].value is the id=filename input field's value
        # editor.getValue() is the content on editor, need to send dictionary format data
        # while post url, need to save editor content into local_storage to use the previous load javascripts
        storage["py_src"] = editor.getValue()
        # add delete_program 3/7, two parameters added, this will also affect save_program function on server.
        req.send({'filename':doc["filename"].value, 'editor':editor.getValue(), 'overwrite':overwrite, 'delete1':delete1, 'delete2':delete2})
        
    # get program from server
    def get_prog(ev):
        # ajax can only read data from server
        _name = '/brython_programs/'+doc["filename"].value
        try:
            editor.setValue(open(_name, encoding="utf-8").read())
            doc["result"].html = doc["filename"].value+" loaded!"
        except:
            doc["result"].html = "can not get "+doc["filename"].value+"!"
        editor.scrollToRow(0)
        editor.gotoLine(0)
        reset_theme()
        
    def get_radio(ev):
        from javascript import JSObject
        filename = JSObject(getradio)("filename")
        # ajax can only read data from server
        doc["filename"].value = filename
        _name = '/brython_programs/'+filename
        editor.setValue(open(_name, encoding="utf-8").read())
        doc["result"].html = filename+" loaded!"
        editor.scrollToRow(0)
        editor.gotoLine(0)
        reset_theme()
        
    # bindings
    doc['run_js'].bind('click',run_js)
    doc['set_debug'].bind('change',set_debug)
    doc['set_overwrite'].bind('change',set_overwrite)
    # add delete_program 4/7, two associated binds added
    doc['set_delete1'].bind('change',set_delete1)
    doc['set_delete2'].bind('change',set_delete2)
    # next functions are defined in editor.py
    doc['show_js'].bind('click',show_js)
    doc['run'].bind('click',run)
    doc['show_console'].bind('click',show_console)
    # get_prog and get _radio (working)
    doc['get_prog'].bind('click', get_prog)
    doc['get_radio'].bind('click', get_radio)
    # reset_the_src and clear_console (working)
    doc['reset_the_src'].bind('click',reset_the_src)
    doc['clear_console'].bind('click',clear_console)
    # clear_canvas and clear_src
    doc['clear_canvas'].bind('click',clear_canvas)
    doc['clear_src'].bind('click',clear_src)
    # only admin can save program to server
    doc['save_program'].bind('click',lambda ev:post('/save_program'))
    # add delete_program 5/7, delete_program button bind to execute delete_program on server.
    doc['delete_program'].bind('click',lambda ev:post('/delete_program'))
    </script>
    <script type="text/javascript">
    window.onload=brython({debug:1, cache:'version'});
    </script>
    <div class="prova"></div>
    <input type="button" onclick="$('.prova').axuploader('disable')" value="asd" />
    <input type="button" onclick="$('.prova').axuploader('enable')" value="ok" />
    </section></body></html>
    '''
    #@+node:course-mde-tw.20140417093332.2221: *3* fileaxupload
    @cherrypy.expose
    def fileaxupload(self, *args, **kwargs):
        filename = kwargs["ax-file-name"]
        flag = kwargs["start"]
        # 終於找到 bug, 因為從 kwargs[] 所取得的變數為字串, 而非數字, 先前用 flag == 0 是錯誤的
        if flag == "0":
            # 若從 0 byte 送起, 表示要開啟新檔案
            file = open(download_root_dir+"downloads/"+filename, "wb")
        else:
            file = open(download_root_dir+"downloads/"+filename, "ab")
        file.write(cherrypy.request.body.read())
        file.close()
        
        return "files uploaded!"
    #@+node:course-mde-tw.20140417093332.2222: *3* index
    @cherrypy.expose
    def index(self):
        return "這是 2014C2 的期末專案, 不僅以 github 協同開發程式, 報告也採協同模式編寫"
    #@+node:course-mde-tw.20140417093332.2223: *3* inputform
    @cherrypy.expose
    def inputform(self, *args, **kwargs):
        outstring = '''
    <!DOCTYPE html> 
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <script type="text/python3">
    from browser import doc, alert, ajax

    # ajax can only read data from server
    _name = '/data/data.txt'
    try:
        data = open(_name, encoding="utf-8").read()
        doc["result"].html = data.replace("\n", "<br />")
    except:
        doc["result"].html = "沒有資料!"

    def on_complete(req):
        print(req.readyState)
        print('status',req.status)
        if req.status==200 or req.status==0:
            doc["result"].html = req.text
        else:
            doc["result"].html = "error "+req.text

    def err_msg():
        doc["result"].html = "server didn't reply after %s seconds" %timeout

    timeout = 4

    def post(url):
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('POST',url,True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        req.send({'studNum':doc["studNum"].value, 'studName':doc["studName"].value})
        
    def validate_form(ev):
        if doc['studNum'].value == '':
            alert('學號欄位不可空白!')
            #doc["result"].html = "學號欄位不可空白!"
            #doc['studNum'].focus()
            return False
        elif doc['studName'].value == '':
            alert('姓名欄位也不可空白!')
            #doc["result"].html = "姓名欄位也不可空白!"
            #doc['studName'].focus()
            return False
        else:
            # 若兩個欄位都填入值, 則呼叫 post, 以 ajax 執行遠端的 /saveData
            post('/saveData')
            doc["studNum"].value = ""
            doc["studName"].value = ""
    doc['submit'].bind('click', validate_form)
    </script>
    '''
        outstring += "學號:<input id='studNum'></input><br />"
        outstring += "姓名:<input id='studName'></input><br />"
        outstring += "<button id='submit'>submit</button><br />"
        outstring += "<hr>"
        outstring += "<div id='result'></div>"
        outstring += '''
    </body>
    </html>
    '''
        return outstring
    #@+node:course-mde-tw.20140417093332.2224: *3* rotate_inputform
    @cherrypy.expose
    def rotate_inputform(self, *args, **kwargs):
        outstring = '''
    <!DOCTYPE html> 
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <script type="text/python3">
    from browser import doc, alert, ajax

    def on_complete(req):
        print(req.readyState)
        print('status',req.status)
        if req.status==200 or req.status==0:
            doc["result"].html = req.text
        else:
            doc["result"].html = "error "+req.text

    def err_msg():
        doc["result"].html = "server didn't reply after %s seconds" %timeout

    timeout = 4

    def post(url):
        req = ajax.ajax()
        req.bind('complete',on_complete)
        req.set_timeout(timeout,err_msg)
        req.open('POST',url,True)
        req.set_header('content-type','application/x-www-form-urlencoded')
        req.send({'cCoord':doc["cCoord"].value, 'dCoord':doc["dCoord"].value})
        
    def validate_form(ev):
        if doc['cCoord'].value == '':
            alert('C 點座標不可空白!')
            #doc["result"].html = "C 點座標不可空白!"
            #doc['cCoord'].focus()
            return False
        elif doc['dCoord'].value == '':
            alert('D 點座標也不可空白!')
            #doc["result"].html = "D 點座標也不可空白!"
            #doc['dCoord'].focus()
            return False
        else:
            # 若兩個欄位都填入值, 則呼叫 post, 以 ajax 執行遠端的 /saveData
            post('/calculatePosition')
    doc['submit'].bind('click', validate_form)
    </script>
    '''
        outstring += "(x, y 座標以空白隔開)<br />"
        outstring += "C點座標:<input id='cCoord'><br />"
        outstring += "D點座標:<input id='dCoord'><br />"
        outstring += "<button id='submit'>submit</button><br />"
        outstring += "<div id='result'>(empty)</div>"
        outstring += '''
    </body>
    </html>
    '''
        return outstring
    #@+node:course-mde-tw.20140417093332.2225: *3* calculatePosition
    @cherrypy.expose
    def calculatePosition(self, cCoord=None, dCoord=None):
        # 表單取得之變數為字串
        xc, yc = cCoord.split(" ")
        xd, yd = dCoord.split(" ")
        # 利用 round() 取小數點位置到第四位數
        radius = round(math.sqrt(math.pow(float(xc) - float(xd), 2) + math.pow(float(yc) - float(yd), 2)), 4)
        outstring = "半徑為:" + str(radius) +"<br />"
        deg = math.pi/180
        for i in range(37):
            count = i +1
            # 利用 round() 取小數點位置到第四位數
            xcoord = round(float(xc) + radius*math.cos(i*10*deg), 4)
            ycoord = round(float(yc) - radius*math.sin(i*10*deg), 4)
            outstring += "旋轉 "+ str(10*i) + " 度後, 第 "+ str(count) +" 點座標:"+ str(xcoord) + " , " + str(ycoord) + "<br />"
        return outstring
    #@+node:course-mde-tw.20140417093332.2226: *3* saveData
    @cherrypy.expose
    def saveData(self, studNum=None, studName=None):
        outputfile = open(data_dir+"/data/data.txt", "at", encoding="utf-8")
        # 要先過濾分隔符號
        outputfile.write(studNum.replace(",", "")+","+studName.replace(",", "")+"\n")
        outputfile.close()
        outstring = ""
        # read data.txt and send data back to client
        if os.path.isfile(data_dir+"/data/data.txt"):
            # read lines from file, lines is a list
            lines = open(data_dir+"/data/data.txt", "r", encoding="utf-8").read().splitlines()
            for i in range(len(lines)):
                outstring += lines[i]+"<br />"
        else:
            outstring += "no data!"
        return outstring
    #@+node:2014spring.20140502183555.1775: *3* drawlines
    @cherrypy.expose
    def drawlines(self, *args, **kwargs):
        outstring = '''
    <!DOCTYPE html> 
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <canvas id="plotarea" width="800" height="800"></canvas>
    <script type="text/python3">
    # 導入數學模組的所有方法
    from math import *
    # 導入時間模組
    import time
    # 導入 doc
    from browser import doc

    # 準備繪圖畫布
    canvas = doc["plotarea"]
    ctx = canvas.getContext("2d")
    # 定義座標轉換(0, 0) 到 (75, 20)
    def change_ref_system(x, y):
        return (20 + x * 8, 420 - y * 20)
    # 定義畫線函式
    def draw_line(x1, y1, x2, y2, linethick = 3, color = "black"):
        ctx.beginPath()
        ctx.lineWidth = linethick
        ctx.moveTo(x1, y1)
        ctx.lineTo(x2, y2)
        ctx.strokeStyle = color
        ctx.stroke()
    # 定義一個點類別
    class Point:
        def __init__(self, x, y):
            self.x = x
            self.y = y
        def distanceTo(self, obj):
            if isinstance(obj, Point):
                return sqrt(pow(obj.x - self.x, 2) + pow(obj.y- self.y, 2))
            else:
                raise TypeError("Invalid type in Point.distanceTo()")
    # 定義一個線類別
    class Line:
        def __init__(self, p1, p2):
            self.p1 = p1
            self.p2 = p2
            # 定義一個 Line 的屬性 length
            self.length = self.p1.distanceTo(self.p2)
            self.deg = pi/180
        def rotate(self, angle):
            # 以 p1  為旋轉中心點
            # angle 為右手則旋轉角度
            # 這裡以左上角為原點, x 向右為正, y 向下為正
            self.p2.x = self.p1.x + self.length*cos(angle*self.deg)
            self.p2.y = self.p1.y - self.length*sin(angle*self.deg)

    p1 = Point(0, 0)
    p2 = Point(10, 0)
    p3 = Point(6.5, 7.8)
    print("點 p1 到點 p2 的距離:", p1.distanceTo(p2))
    line1 = Line(p1, p2)
    print("線 line1 的長度:", line1.length)
    # 以 p3 為圓心, 旋轉 90 度
    line1.rotate(90)
    #work = time.set_interval(graph, 100)
    print("旋轉後, line1 的長度:", line1.length)
    print("旋轉後, p1 的座標:", line1.p1.x, ",", line1.p1.y)
    print("旋轉後, p2 的座標:", line1.p2.x, ",",  line1.p2.y)
    x1, y1 = change_ref_system(0, 0)
    for 索引 in range(0, 70, 4):
        x2, y2 = change_ref_system(索引, 20)
        draw_line(x1, y1, x2, y2, linethick=3, color="blue")
    x1, y1 = change_ref_system(70, 0)
    for 索引 in range(0, 70, 4):
        x2, y2 = change_ref_system(索引, 20)
        draw_line(x1, y1, x2, y2, linethick=3, color="red")
    </script>
    </body>
    </html>
    '''
        return outstring
    #@+node:2014spring.20140502183555.1866: *3* fillpoly
    @cherrypy.expose
    def fillpoly(self, *args, **kwargs):
        outstring = '''
    <!DOCTYPE html> 
    <html>
    <head>
    <meta http-equiv="content-type" content="text/html;charset=utf-8">
    <script type="text/javascript" src="/static/Brython2.1.0-20140419-113919/brython.js"></script>
    </head>
    <body onload="brython({debug:1, cache:'version'})">
    <canvas id="plotarea" width="800" height="800"></canvas>
    <script type="text/python3">
    # 導入數學模組的所有方法
    from math import *
    # 導入時間模組
    import time
    # 導入 doc
    from browser import doc

    # 準備繪圖畫布
    canvas = doc["plotarea"]
    ctx = canvas.getContext("2d")

    # 定義座標轉換(0, 0) 到 (75, 20)
    def change_ref_system(x, y):
        return (20 + x * 8, 420 - y * 20)

    # 定義畫線函式
    def draw_line(x1, y1, x2, y2, linethick = 3, color = "black"):
        ctx.beginPath()
        ctx.lineWidth = linethick
        ctx.moveTo(x1, y1)
        ctx.lineTo(x2, y2)
        ctx.strokeStyle = color
        ctx.stroke()

    def fill():
        ctx.beginPath()
        ctx.moveTo(75,50)
        ctx.lineTo(100,75)
        ctx.lineTo(100,25)
        ctx.fill()
        
    def star():
        ctx.beginPath()
        ctx.moveTo(0,50)
        ctx.lineTo(11,16)
        ctx.lineTo(48,16)
        ctx.fill()

    ctx.fillStyle = "blue"
    fill()
    star()

    x1, y1 = change_ref_system(0, 0)
    for 索引 in range(0, 70, 4):
        x2, y2 = change_ref_system(索引, 20)
        draw_line(x1, y1, x2, y2, linethick=3, color="blue")
    x1, y1 = change_ref_system(70, 0)
    for 索引 in range(0, 70, 4):
        x2, y2 = change_ref_system(索引, 20)
        draw_line(x1, y1, x2, y2, linethick=3, color="red")
    </script>
    </body>
    </html>
    '''
        return outstring
    #@-others
    #index.exposed = True
#@-others
########################### 4. 安排啟動設定
# 配合程式檔案所在目錄設定靜態目錄或靜態檔案
application_conf = {'/static':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': _curdir+"/static"},
        '/downloads':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/downloads"},
        '/data':{
        'tools.staticdir.on': True,
        'tools.staticdir.dir': data_dir+"/data"}
    }

########################### 5. 在近端或遠端啟動程式
# 利用 C2Project() class 產生案例物件
root = C2Project()

#####################################################
# 這是 c2g1 組的物件案例定義
#####################################################
# 導入 application 目錄下的模組
# 導入 programs/c2g1 並且命名為 c2g1
# 模組內建使用 __init__.py 中的 C2G1 類別
# 若使用 programs/c2g1/class1.py, 則使用 import programs.c2g1.class1 as c2g1
import programs.c2g1 as c2g1
# 利用 c2g1 目錄下的 __init__.py 檔案中的 C2G1 類別建立案例物件
# 而且指到 application 根目錄下的 c2g1
root.c2g1 = c2g1.C2G1()
#####################################################
# 結束 c2g1 組的物件案例定義
#####################################################

# 以下為 c2g2 的模組導入與連結設定
import programs.c2g2 as c2g2
root.c2g2 = c2g2.C2G2()

# 假如在 os 環境變數中存在 'OPENSHIFT_REPO_DIR', 表示程式在 OpenShift 環境中執行
if 'OPENSHIFT_REPO_DIR' in os.environ.keys():
    # 雲端執行啟動
    application = cherrypy.Application(root, config = application_conf)
else:
    # 近端執行啟動
    '''
    cherrypy.server.socket_port = 8080
    cherrypy.server.socket_host = '127.0.0.1'
    '''
    cherrypy.quickstart(root, config = application_conf)

#@-leo
